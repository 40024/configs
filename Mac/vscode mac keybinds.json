

// Place your key bindings in this file to override the defaults
[
    {
        "key": "alt+k",
        "command": "workbench.action.nextEditor"
    },
    {
        "key": "shift+cmd+]",
        "command": "-workbench.action.nextEditor"
    },
    {
        "key": "shift+cmd+]",
        "command": "workbench.action.quickOpenNavigateNextInEditorPicker",
        "when": "inEditorsPicker && inQuickOpen"
    },
    {
        "key": "ctrl+tab",
        "command": "-workbench.action.quickOpenNavigateNextInEditorPicker",
        "when": "inEditorsPicker && inQuickOpen"
    },
    {
        "key": "shift+cmd+[",
        "command": "workbench.action.quickOpenLeastRecentlyUsedEditorInGroup",
        "when": "!inEditorsPicker"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "-workbench.action.quickOpenLeastRecentlyUsedEditorInGroup",
        "when": "!activeEditorGroupEmpty"
    },
    {
        "key": "shift+j",
        "command": "workbench.action.previousEditor",
        "when": "neovim.mode == 'normal'"
    },
    {
        "key": "shift+cmd+[",
        "command": "-workbench.action.previousEditor"
    },
    {
        "key": "shift+alt+down",
        "command": "editor.action.copyLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+down",
        "command": "-editor.action.copyLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+up",
        "command": "editor.action.copyLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+up",
        "command": "-editor.action.copyLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "cmd+down",
        "command": "editor.action.moveLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+down",
        "command": "-editor.action.moveLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "cmd+up",
        "command": "editor.action.moveLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+up",
        "command": "-editor.action.moveLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "cmd+=",
        "command": "workbench.action.navigateForward",
        "when": "canNavigateForward"
    },
    {
        "key": "ctrl+shift+-",
        "command": "-workbench.action.navigateForward",
        "when": "canNavigateForward"
    },
    {
        "key": "alt+space",
        "command": "editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible"
    },
    {
        "key": "alt+escape",
        "command": "-editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible"
    },
    {
        "key": "cmd+i",
        "command": "-editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible"
    },
    {
        "key": "cmd+j",
        "command": "-workbench.action.togglePanel"
    },
    {
        "key": "cmd+j",
        "command": "workbench.action.terminal.toggleTerminal",
        "when": "terminal.active"
    },
    {
        "key": "ctrl+`",
        "command": "-workbench.action.terminal.toggleTerminal",
        "when": "terminal.active"
    },
    {
        "key": "insert",
        "command": "-extension.vim_insert",
        "when": "editorTextFocus && vim.active && !inDebugRepl"
    },
    {
        "key": "cmd+y",
        "command": "extension.vim_ctrl+r",
        "when": "editorTextFocus && vim.active && vim.use<C-r> && !inDebugRepl"
    },
    {
        "key": "ctrl+r",
        "command": "-extension.vim_ctrl+r",
        "when": "editorTextFocus && vim.active && vim.use<C-r> && !inDebugRepl"
    },
    {
        "key": "shift+cmd+b",
        "command": "editor.debug.action.toggleBreakpoint",
        "when": "debuggersAvailable && disassemblyViewFocus || debuggersAvailable && editorTextFocus"
    },
    {
        "key": "f9",
        "command": "-editor.debug.action.toggleBreakpoint",
        "when": "debuggersAvailable && disassemblyViewFocus || debuggersAvailable && editorTextFocus"
    },
    {
        "key": "alt+w",
        "command": "workbench.action.debug.stepOver",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "alt+e",
        "command": "workbench.action.debug.continue",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "f5",
        "command": "-workbench.action.debug.continue",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "alt+cmd+e",
        "command": "workbench.action.debug.stepIntoTarget",
        "when": "inDebugMode && stepIntoTargetsSupported && debugState == 'stopped'"
    },
    {
        "key": "cmd+f11",
        "command": "-workbench.action.debug.stepIntoTarget",
        "when": "inDebugMode && stepIntoTargetsSupported && debugState == 'stopped'"
    },
    {
        "key": "alt+q",
        "command": "workbench.action.debug.stop",
        "when": "inDebugMode && !focusedSessionIsAttach"
    },
    {
        "key": "shift+f5",
        "command": "-workbench.action.debug.stop",
        "when": "inDebugMode && !focusedSessionIsAttach"
    },
    {
        "key": "f10",
        "command": "-workbench.action.debug.stepOver",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "alt+i",
        "command": "workbench.action.debug.stepInto",
        "when": "debugState != 'inactive'"
    },
    {
        "key": "f11",
        "command": "-workbench.action.debug.stepInto",
        "when": "debugState != 'inactive'"
    },
    {
        "key": "alt+o",
        "command": "workbench.action.debug.stepOut",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "shift+f11",
        "command": "-workbench.action.debug.stepOut",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "alt+r",
        "command": "workbench.action.debug.restart",
        "when": "inDebugMode"
    },
    {
        "key": "shift+cmd+f5",
        "command": "-workbench.action.debug.restart",
        "when": "inDebugMode"
    },
    {
        "key": "alt+a",
        "command": "editor.debug.action.selectionToWatch",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "cmd+r",
        "command": "workbench.action.openRecent"
    },
    {
        "key": "ctrl+r",
        "command": "-workbench.action.openRecent"
    },
    {
        "key": "i",
        "command": "toggleVim",
        "when": "editorTextFocus && vim.active && vim.mode == 'Normal'  && vim.mode == 'Normal' && vim.mode == 'Insert'"
    },
    {
        "key": "cmd+e",
        "command": "workbench.action.quickOpen"
    },
    {
        "key": "cmd+=",
        "command": "-workbench.action.zoomIn"
    },
    {
        "key": "cmd+-",
        "command": "workbench.action.navigateBack",
        "when": "canNavigateBack"
    },
    {
        "key": "ctrl+-",
        "command": "-workbench.action.navigateBack",
        "when": "canNavigateBack"
    },
    {
        "key": "browserback",
        "command": "-workbench.action.navigateBack",
        "when": "canNavigateBack"
    },
    {
        "key": "cmd+-",
        "command": "-workbench.action.zoomOut"
    },
    {
        "key": "cmd+e",
        "command": "-actions.findWithSelection"
    },
    {
        "key": "cmd+; shift+cmd+p",
        "command": "copyRelativeFilePath"
    },
    {
        "key": "cmd+k shift+alt+cmd+c",
        "command": "-copyRelativeFilePath",
        "when": "editorFocus"
    },
    {
        "key": "shift+alt+cmd+c",
        "command": "-copyRelativeFilePath",
        "when": "!editorFocus"
    },
    {
        "key": "shift+alt+n",
        "command": "extension.advancedNewFile"
    },
    {
        "key": "alt+cmd+n",
        "command": "-extension.advancedNewFile"
    },
    {
        "key": "cmd+r",
        "command": "-workbench.action.reloadWindow",
        "when": "isDevelopment"
    },
    {
        "key": "alt+cmd+e",
        "command": "workbench.action.quickOpenNavigatePreviousInFilePicker",
        "when": "inFilesPicker && inQuickOpen"
    },
    {
        "key": "shift+alt+tab",
        "command": "workbench.action.previousEditor"
    },
    {
        "key": "ctrl+tab",
        "command": "workbench.action.nextEditor"
    },
    {
        "key": "shift+cmd+a",
        "command": "workbench.action.toggleEditorWidths"
    },
    {
        "key": "cmd+y",
        "command": "redo"
    },
    {
        "key": "alt+f",
        "command": "vscode-neovim.ctrl-f",
        "when": "editorTextFocus && neovim.ctrlKeysNormal.f && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
    },
    {
        "key": "ctrl+f",
        "command": "-vscode-neovim.ctrl-f",
        "when": "editorTextFocus && neovim.ctrlKeysNormal.f && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
    },
    {
        "key": "alt+b",
        "command": "vscode-neovim.ctrl-b",
        "when": "editorTextFocus && neovim.ctrlKeysNormal.b && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
    },
    {
        "key": "ctrl+b",
        "command": "-vscode-neovim.ctrl-b",
        "when": "editorTextFocus && neovim.ctrlKeysNormal.b && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
    },
    {
        "key": "cmd+; cmd+n",
        "command": "chatPanelView.newChat"
    },
    {
        "key": "ctrl+l",
        "command": "-vscode-neovim.send-cmdline",
        "when": "neovim.init && neovim.mode == 'cmdline'"
    },
    {
        "key": "ctrl+l",
        "command": "-vscode-neovim.send",
        "when": "editorTextFocus && neovim.ctrlKeysNormal.l && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
    },
    {
        "key": "ctrl+l",
        "command": "-vscode-neovim.send",
        "when": "editorTextFocus && neovim.ctrlKeysInsert.l && neovim.init && neovim.mode == 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
    },
    {
        "key": "cmd+; cmd+t",
        "command": "testing.refreshTests",
        "when": "testing.canRefresh"
    },
    {
        "key": "cmd+; cmd+r",
        "command": "-testing.refreshTests",
        "when": "testing.canRefresh"
    },
    {
        "key": "cmd+; cmd+r",
        "command": "python.execInTerminal"
    },
    {
        "key": "shift+cmd+c",
        "command": "workbench.action.toggleAuxiliaryBar"
    },
    {
        "key": "alt+cmd+b",
        "command": "-workbench.action.toggleAuxiliaryBar"
    },
    {
        "key": "escape",
        "command": "extension.vim_escape",
        "when": "editorTextFocus && vim.active && !inDebugRepl && !inlineSuggestionVisible && !suggestWidgetVisible"
    },
    {
        "key": "escape",
        "command": "vscode-neovim.escape",
        "when": "editorTextFocus && !suggestWidgetVisible.active && !suggestWidgetVisible && !suggestWidgetDetailsVisible && !suggestWidgetHasFocusedSuggestion && !simpleSuggestWidgetHasFocusedSuggestion && neovim.init && !suggestWidgetVisible.active && !dirtyDiffVisible && !findWidgetVisible && !inReferenceSearchEditor && !markersNavigationVisible && !notebookCellFocused && !notificationCenterVisible && !parameterHintsVisible && !referenceSearchVisible && neovim.mode == 'normal' && editorLangId not in 'neovim.editorLangIdExclusions'"
    },
    {
        "key": "escape",
        "command": "-vscode-neovim.escape",
        "when": "editorTextFocus && !suggestWidgetVisible.active && !suggestWidgetVisible && !suggestWidgetDetailsVisible && !suggestWidgetHasFocusedSuggestion && !simpleSuggestWidgetHasFocusedSuggestion && neovim.init && !dirtyDiffVisible && !findWidgetVisible && !inReferenceSearchEditor && !markersNavigationVisible && !notebookCellFocused && !notificationCenterVisible && !parameterHintsVisible && !referenceSearchVisible && neovim.mode == 'normal' && editorLangId not in 'neovim.editorLangIdExclusions'"
    },
    {
        "key": "escape",
        "command": "-vscode-neovim.escape",
        "when": "editorTextFocus && !suggestWidgetVisible.active && !suggestWidgetVisible && !suggestWidgetDetailsVisible && !suggestWidgetHasFocusedSuggestion && !simpleSuggestWidgetHasFocusedSuggestion && neovim.init && neovim.mode != 'normal' && editorLangId not in 'neovim.editorLangIdExclusions'"
    },
    {
        "key": "ctrl+o",
        "command": "vscode-neovim.escape",
        "when": "editorTextFocus && !inInlineEditsPreviewEditor && !suggestWidgetDetailsVisible && !suggestWidgetHasFocusedSuggestion && !suggestWidgetVisible && neovim.ctrlKeysInsert.o && neovim.init && neovim.mode == 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
    },
    {
        "key": "ctrl+o",
        "command": "-vscode-neovim.escape",
        "when": "editorTextFocus && neovim.ctrlKeysInsert.o && neovim.init && neovim.mode == 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
    },
    {
        "key": "alt+cmd+g",
        "command": "editor.action.previousMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "shift+cmd+g",
        "command": "-editor.action.previousMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "shift+cmd+o",
        "command": "-workbench.action.gotoSymbol",
        "when": "!accessibilityHelpIsShown && !accessibleViewIsShown"
    },
    {
        "key": "shift+alt+s",
        "command": "editor.action.accessibleViewGoToSymbol",
        "when": "accessibilityHelpIsShown && accessibleViewGoToSymbolSupported || accessibleViewGoToSymbolSupported && accessibleViewIsShown"
    },
    {
        "key": "shift+cmd+o",
        "command": "-editor.action.accessibleViewGoToSymbol",
        "when": "accessibilityHelpIsShown && accessibleViewGoToSymbolSupported || accessibleViewGoToSymbolSupported && accessibleViewIsShown"
    },
    {
        "key": "ctrl+s",
        "command": "-vscode-neovim.send",
        "when": "editorTextFocus && neovim.ctrlKeysInsert.s && neovim.init && neovim.mode == 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
    },
    {
        "key": "ctrl+s",
        "command": "-vscode-neovim.send",
        "when": "editorTextFocus && neovim.ctrlKeysNormal.s && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
    },
    {
        "key": "cmd+s",
        "command": "-workbench.action.files.save"
    },
    {
        "key": "cmd+t",
        "command": "-workbench.action.showAllSymbols"
    },
    {
        "key": "shift+cmd+e",
        "command": "workbench.action.quickOpenNavigatePreviousInFilePicker",
        "when": "inFilesPicker && inQuickOpen"
    },
    {
        "key": "cmd+g",
        "command": "workbench.action.gotoLine"
    },
    {
        "key": "ctrl+g",
        "command": "-workbench.action.gotoLine"
    },
    {
        "key": "ctrl+g",
        "command": "editor.action.nextMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "cmd+g",
        "command": "-editor.action.nextMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "cmd+e",
        "command": "workbench.action.quickOpenNavigateNextInFilePicker",
        "when": "inFilesPicker && inQuickOpen"
    },
    {
        "key": "ctrl+tab",
        "command": "-workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup",
        "when": "!activeEditorGroupEmpty"
    },
    {
        "key": "shift+cmd+]",
        "command": "workbench.action.quickOpenPreviousRecentlyUsedEditor",
        "when": "!inEditorsPicker"
    },
    {
        "key": "shift+cmd+[",
        "command": "workbench.action.quickOpenNavigatePreviousInEditorPicker",
        "when": "inEditorsPicker && inQuickOpen"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "-workbench.action.quickOpenNavigatePreviousInEditorPicker",
        "when": "inEditorsPicker && inQuickOpen"
    },
    {
        "key": "cmd+v",
        "command": "-editor.action.clipboardPasteAction"
    },
    {
        "key": "cmd+v",
        "command": "editor.action.pasteAsText",
        "when": "editorTextFocus"
    },
    {
        "key": "cmd+v",
        "command": "editor.action.clipboardPasteAction",
        "when": "!editorTextFocus"
    },
    {
        "key": "shift+cmd+g shift+cmd+g",
        "command": "workbench.scm.history.focus",
        "when": "view.workbench.scm.visible"
    },
    {
        "key": "alt+f",
        "command": "search.action.focusNextSearchResult",
        "when": "hasSearchResult || inSearchEditor"
    },
    {
        "key": "f4",
        "command": "-search.action.focusNextSearchResult",
        "when": "hasSearchResult || inSearchEditor"
    },
    {
        "key": "shift+alt+f",
        "command": "search.action.focusPreviousSearchResult",
        "when": "hasSearchResult || inSearchEditor"
    },
    {
        "key": "shift+f4",
        "command": "-search.action.focusPreviousSearchResult",
        "when": "hasSearchResult || inSearchEditor"
    },
    {
        "key": "alt+w",
        "command": "toggleSearchEditorWholeWord",
        "when": "inSearchEditor && searchInputBoxFocus"
    },
    {
        "key": "alt+cmd+w",
        "command": "-toggleSearchEditorWholeWord",
        "when": "inSearchEditor && searchInputBoxFocus"
    },
    {
        "key": "cmd+s d",
        "command": "workbench.action.splitEditorDown",
        "when": "editortextfocus && !terminalFocus && neovim.mode != 'cmdline'"
    },
    {
        "key": "ctrl+w s",
        "command": "-workbench.action.splitEditorDown",
        "when": "!editorTextFocus && !terminalFocus && neovim.mode != 'cmdline'"
    },
    {
        "key": "cmd+s r",
        "command": "workbench.action.splitEditorRight",
        "when": "editorTextFocus && !terminalFocus && neovim.mode != 'cmdline'"
    },
    {
        "key": "ctrl+w v",
        "command": "-workbench.action.splitEditorRight",
        "when": "!editorTextFocus && !terminalFocus && neovim.mode != 'cmdline'"
    },
    {
        "key": "cmd+s cmd+w",
        "command": "workbench.action.navigateUp"
    },
    {
        "key": "ctrl+w up",
        "command": "-workbench.action.navigateUp",
        "when": "!editorTextFocus && !terminalFocus && neovim.mode != 'cmdline'"
    },
    {
        "key": "ctrl+w k",
        "command": "-workbench.action.navigateUp",
        "when": "!editorTextFocus && !terminalFocus && neovim.mode != 'cmdline'"
    },
    {
        "key": "cmd+s cmd+s",
        "command": "workbench.action.navigateDown"
    },
    {
        "key": "ctrl+w down",
        "command": "-workbench.action.navigateDown",
        "when": "!editorTextFocus && !terminalFocus && neovim.mode != 'cmdline'"
    },
    {
        "key": "ctrl+w j",
        "command": "-workbench.action.navigateDown",
        "when": "!editorTextFocus && !terminalFocus && neovim.mode != 'cmdline'"
    },
    {
        "key": "cmd+s cmd+a",
        "command": "workbench.action.navigateLeft"
    },
    {
        "key": "ctrl+w left",
        "command": "-workbench.action.navigateLeft",
        "when": "!editorTextFocus && !terminalFocus && neovim.mode != 'cmdline'"
    },
    {
        "key": "ctrl+w h",
        "command": "-workbench.action.navigateLeft",
        "when": "!editorTextFocus && !terminalFocus && neovim.mode != 'cmdline'"
    },
    {
        "key": "cmd+s cmd+d",
        "command": "workbench.action.navigateRight"
    },
    {
        "key": "ctrl+w right",
        "command": "-workbench.action.navigateRight",
        "when": "!editorTextFocus && !terminalFocus && neovim.mode != 'cmdline'"
    },
    {
        "key": "ctrl+w l",
        "command": "-workbench.action.navigateRight",
        "when": "!editorTextFocus && !terminalFocus && neovim.mode != 'cmdline'"
    },
    {
        "key": "cmd+s =",
        "command": "workbench.action.evenEditorWidths",
        "when": "editorTextFocus && !terminalFocus && neovim.mode != 'cmdline'"
    },
    {
        "key": "ctrl+w =",
        "command": "-workbench.action.evenEditorWidths",
        "when": "!editorTextFocus && !terminalFocus && neovim.mode != 'cmdline'"
    },
    {
        "key": "cmd+s q",
        "command": "workbench.action.closeActiveEditor",
        "when": "editorTextFocus && !filesExplorerFocus && !searchViewletFocus && !terminalFocus && neovim.mode != 'cmdline'"
    },
    {
        "key": "ctrl+w q",
        "command": "-workbench.action.closeActiveEditor",
        "when": "!editorTextFocus && !filesExplorerFocus && !searchViewletFocus && !terminalFocus && neovim.mode != 'cmdline'"
    },
    {
        "key": "cmd+s -",
        "command": "workbench.action.decreaseViewHeight",
        "when": "!editorTextFocus && !isAuxiliaryWindowFocusedContext && !terminalFocus && neovim.mode != 'cmdline'"
    },
    {
        "key": "ctrl+w -",
        "command": "-workbench.action.decreaseViewHeight",
        "when": "!editorTextFocus && !isAuxiliaryWindowFocusedContext && !terminalFocus && neovim.mode != 'cmdline'"
    },
    {
        "key": "ctrl+w",
        "command": "-vscode-neovim.send-cmdline",
        "when": "neovim.init && neovim.mode == 'cmdline'"
    },
    {
        "key": "ctrl+w",
        "command": "-vscode-neovim.send",
        "when": "editorTextFocus && neovim.ctrlKeysNormal.w && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
    },
    {
        "key": "ctrl+w",
        "command": "-vscode-neovim.send",
        "when": "editorTextFocus && neovim.ctrlKeysInsert.w && neovim.init && neovim.mode == 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
    },
    {
        "key": "ctrl+w",
        "command": "workbench.action.closeActiveEditor"
    },
    {
        "key": "cmd+d",
        "command": "editor.action.addSelectionToNextFindMatch",
        "when": "editorFocus && neovim.mode == 'insert'"
    },
    {
        "key": "cmd+d",
        "command": "-editor.action.addSelectionToNextFindMatch",
        "when": "editorFocus"
    },
    {
        "key": "cmd+d",
        "command": "vscode-neovim.ctrl-d",
        "when": "editorTextFocus && neovim.ctrlKeysNormal.d && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
    },
    {
        "key": "ctrl+d",
        "command": "-vscode-neovim.ctrl-d",
        "when": "editorTextFocus && neovim.ctrlKeysNormal.d && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
    },
    {
        "key": "cmd+u",
        "command": "vscode-neovim.ctrl-u",
        "when": "editorTextFocus && neovim.ctrlKeysNormal.u && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
    },
    {
        "key": "ctrl+u",
        "command": "-vscode-neovim.ctrl-u",
        "when": "editorTextFocus && neovim.ctrlKeysNormal.u && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
    },
    {
        "key": "alt+k",
        "command": "workbench.action.nextEditor"
    },
    {
        "key": "shift+k",
        "command": "workbench.action.nextEditor",
        "when": "neovim.mode == 'normal'"
    },
    {
        "key": "alt+j",
        "command": "workbench.action.previousEditor"
    },
    {
        "key": "shift+u",
        "command": "vscode-neovim.ctrl-y",
        "when": "editorTextFocus && neovim.ctrlKeysNormal.e && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
    },
    {
        "key": "ctrl+y",
        "command": "-vscode-neovim.ctrl-y",
        "when": "editorTextFocus && neovim.ctrlKeysNormal.y && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
    },
    {
        "key": "shift+d",
        "command": "vscode-neovim.ctrl-e",
        "when": "editorTextFocus && neovim.ctrlKeysNormal.e && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
    },
    {
        "key": "ctrl+e",
        "command": "-vscode-neovim.ctrl-e",
        "when": "editorTextFocus && neovim.ctrlKeysNormal.e && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
    },
    {
        "key": "cmd+; shift+cmd+c",
        "command": "notifications.clearAll"
    },
    {
        "key": "shift+cmd+g",
        "command": "workbench.view.scm"
    },
    {
        "key": "ctrl+shift+g",
        "command": "-workbench.view.scm",
        "when": "workbench.scm.active"
    },
    {
        "key": "cmd+h",
        "command": "git.viewHistory"
    },
    {
        "key": "shift+alt+c",
        "command": "gitTreeCompare.openChanges"
    },
    {
        "key": "shift+cmd+b",
        "command": "workbench.action.toggleAuxiliaryBar",
        "when": "config.workbench.layoutControl.type == 'both' && config.workbench.sideBar.location == 'left' || config.workbench.layoutControl.type == 'toggles' && config.workbench.sideBar.location == 'left'"
    },
    {
        "key": "shift+cmd+c",
        "command": "git.openChange"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "workbench.action.previousEditor"
    },
    {
        "key": "shift+cmd+d",
        "command": "editor.action.addSelectionToNextFindMatch",
        "when": "editorFocus && neovim.mode != 'insert'"
    },
    {
        "key": "shift+cmd+d",
        "command": "editor.action.moveSelectionToNextFindMatch",
        "when": "editorFocus && neovim.mode != 'insert'"
    },
    {
        "key": "cmd+k cmd+d",
        "command": "-editor.action.moveSelectionToNextFindMatch",
        "when": "editorFocus"
    },
    {
        "key": "shift+cmd+d",
        "command": "-workbench.view.debug",
        "when": "viewContainer.workbench.view.debug.enabled"
    },
    {
        "key": "shift+cmd+d",
        "command": "editor.action.addSelectionToPreviousFindMatch",
        "when": "editorFocus && neovim.mode == 'insert'"
    },
    {
        "key": "cmd+\\",
        "command": "workbench.action.moveEditorToRightGroup"
    },
    {
        "key": "cmd+\\",
        "command": "-workbench.action.splitEditor"
    },
    {
        "key": "shift+cmd+\\",
        "command": "workbench.action.moveEditorToLeftGroup"
    },
    {
        "key": "cmd+s cmd+e",
        "command": "workbench.action.gotoSymbol",
        "when": "!accessibilityHelpIsShown && !accessibleViewIsShown"
    },
    {
        "key": "cmd+s cmd+e",
        "command": "editor.action.accessibleViewGoToSymbol",
        "when": "accessibilityHelpIsShown && accessibleViewGoToSymbolSupported || accessibleViewGoToSymbolSupported && accessibleViewIsShown"
    },
    {
        "key": "cmd+s cmd+f",
        "command": "workbench.action.showAllSymbols"
    },
    {
        "key": "cmd+s e",
        "command": "workbench.action.showAllSymbols"
    },
    {
        "key": "cmd+; cmd+t",
        "command": "workbench.action.terminal.split",
        "when": "terminalProcessSupported || terminalFocus && terminalWebExtensionContributedProfile"
    },
    {
        "key": "ctrl+shift+c",
        "command": "gitTreeCompare.openAllChanges"
    },
    {
        "key": "cmd+k cmd+z",
        "command": "workbench.action.toggleZenMode",
        "when": "!isAuxiliaryWindowFocusedContext"
    },
    {
        "key": "cmd+o",
        "command": "gitTreeCompare.openFile",
        "when": "gitTreeCompare.active"
    },
    {
        "key": "cmd+t",
        "command": "toggle.diff.renderSideBySide",
        "when": "inDiffEditor || gitTreeCompare.active"
    },
    {
        "key": "u",
        "command": "undo",
        "when": "editorTextFocus && neovim.mode == 'normal'"
    },
    {
        "key": "cmd+; shift+alt+cmd+c",
        "command": "testing.debugAtCursor",
        "when": "editorTextFocus"
    },
    {
        "key": "cmd+; cmd+c",
        "command": "-testing.debugAtCursor",
        "when": "editorTextFocus"
    },
    {
        "key": "g r",
        "command": "editor.action.goToReferences",
        "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor && neovim.mode == 'normal'"
    },
    {
        "key": "g d",
        "command": "editor.action.revealDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && neovim.mode == 'normal'"
    },
    {
        "key": "g shift+r",
        "command": "editor.action.referenceSearch.trigger",
        "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && neovim.mode == 'normal'"
    },
    {
        "key": "cmd+; cmd+s",
        "command": "git.checkout"
    },
    {
        "key": "g g",
        "command": "cursorTop",
        "when": "textInputFocus && neovim.mode == 'normal'"
    },
    {
        "key": "shift+alt+w",
        "command": "workbench.action.moveEditorToNewWindow"
    },
    {
        "key": "cmd+k cmd+c",
        "command": "-editor.action.addCommentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "cmd+; cmd+c",
        "command": "workbench.action.toggleCompactAuxiliaryWindow"
    },
    {
        "key": "cmd+; cmd+d",
        "command": "git.stashIncludeUntracked"
    },
    {
        "key": "alt+h",
        "command": "-testing.toggleTestingPeekHistory",
        "when": "testing.isPeekVisible"
    },
    {
        "key": "alt+h",
        "command": "-editor.action.accessibilityHelpOpenHelpLink",
        "when": "accessibilityHelpIsShown"
    },
    {
        "key": "shift+cmd+h",
        "command": "git.viewFileHistory"
    },
    {
        "key": "alt+h",
        "command": "-git.viewFileHistory"
    },
    {
        "key": "cmd+; shift+cmd+d",
        "command": "git.cleanAll"
    },
    {
        "key": "cmd+k cmd+t",
        "command": "workbench.action.terminal.new",
        "when": "terminalProcessSupported || terminalWebExtensionContributedProfile"
    },
    {
        "key": "ctrl+shift+`",
        "command": "-workbench.action.terminal.new",
        "when": "terminalProcessSupported || terminalWebExtensionContributedProfile"
    },
    {
        "key": "cmd+k shift+cmd+t",
        "command": "workbench.action.createTerminalEditorSide"
    },
    {
        "key": "ctrl+backspace",
        "command": "deleteWordLeft",
        "when": "textInputFocus && !editorReadonly"
    }
]
